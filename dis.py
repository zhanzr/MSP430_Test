code_f000 = [0x0000, 0x0700, 0x5A0B, 0x010B, 0x0001, 0x0E5A, 0x0101, 0x5A00, 
    0x0303, 0x0001, 0x075A, 0x0104, 0x5A00, 0x040C, 0x0001, 0x0000, 
    0x8600, 0x000C, 0x0000, 0x0001, 0x0000, 0x0200, 0x000D, 0x0000, 
    0x0903, 0x0000, 0x0100, 0x5100, 0x091B, 0x0103, 0x36A2, 0x0612, 
    0xFF02, 0x4031, 0x0300, 0x403C, 0x0210, 0x403D, 0x0038, 0x12B0, 
    0xFCA0, 0x12B0, 0xF5F8, 0x12B0, 0xFCE4, 0x120D, 0x120C, 0x120F, 
    0x120E, 0xD2A2, 0x0160, 0xB392, 0x0162, 0x2805, 0x40F2, 0x0011, 
    0x021D, 0x43C2, 0x021E, 0xC392, 0x0162, 0x40B2, 0x010C, 0x0172, 
    0xC392, 0x0164, 0x40B2, 0x0044, 0x0174, 0x90F2, 0x000A, 0x021D, 
    0x2803, 0x4034, 0x0200, 0x3C08, 0x92F2, 0x021D, 0x2803, 0x4034, 
    0x0201, 0x3C02, 0x4034, 0x0202, 0xB392, 0x0164, 0x2BFD, 0x12B0, 
    0xFCB2, 0x1050, 0x1152, 0x1050, 0x114E, 0x1064, 0x53F2, 0x021D, 
    0x2402, 0x4030, 0xF5E4, 0xF0F2, 0x00C0, 0x0201, 0x93C2, 0x021E, 
    0x2057, 0x40B2, 0x01C8, 0x0172, 0xB392, 0x0162, 0x2BFD, 0xD2A2, 
    0x0160, 0x40B2, 0x0878, 0x0172, 0xC392, 0x0162, 0x4292, 0x0200, 
    0x0212, 0xC312, 0x1052, 0x0202, 0x425E, 0x0202, 0x4EC2, 0x021C, 
    0x425F, 0x0200, 0x525F, 0x0201, 0x5E4F, 0x4FC2, 0x0220, 0x907E, 
    0x003C, 0x2403, 0x907E, 0x004F, 0x2005, 0xD392, 0x0210, 0x42F2, 
    0x021D, 0x3C05, 0xC392, 0x0210, 0x40F2, 0x0011, 0x021D, 0x421C, 
    0x0212, 0x12B0, 0xFA06, 0x4CC2, 0x0240, 0x925C, 0x0203, 0x2009, 
    0xC0F2, 0x0040, 0x021A, 0xD3A2, 0x0210, 0xB3E2, 0x021A, 0x2C10, 
    0x3C11, 0x4C4E, 0x425F, 0x0203, 0x531F, 0x9F0E, 0x2009, 0xD0F2, 
    0x0040, 0x021A, 0xD3A2, 0x0210, 0xB0F2, 0x0010, 0x021A, 0x2802, 
    0xC3A2, 0x0210, 0x43D2, 0x021E, 0x43E2, 0x021F, 0x4030, 0xF5E4, 
    0xB392, 0x0210, 0x2972, 0x1150, 0x107A, 0x52D2, 0x0201, 0x0201, 
    0x60D0, 0x1070, 0x106E, 0x425F, 0x021E, 0x42DF, 0x0202, 0x022D, 
    0x935F, 0x2007, 0x425E, 0x0202, 0xF07E, 0x000F, 0x536E, 0x4EC2, 
    0x021F, 0x53D2, 0x021E, 0x92D2, 0x021F, 0x021E, 0x214D, 0x92D2, 
    0x0220, 0x0202, 0x2140, 0xB3A2, 0x0210, 0x2C04, 0x90F2, 0x003C, 
    0x021C, 0x2139, 0x425F, 0x022F, 0x907F, 0x000B, 0x2D34, 0x407E, 
    0x0005, 0x4F4D, 0x4D0C, 0x5D0D, 0x5D0D, 0x5C0D, 0x503D, 0xF000, 
    0x403C, 0x0221, 0x12B0, 0xFCC2, 0x118F, 0x903F, 0x000B, 0x2D23, 
    0x5F0F, 0x4F10, 0xF206, 0xF21C, 0xF446, 0xF28C, 0xF2A4, 0xF304, 
    0xF32A, 0xF356, 0xF38E, 0xF3A6, 0xF3B4, 0xF3C6, 0x426E, 0x403D, 
    0x0207, 0x403C, 0x0227, 0x12B0, 0xFCC2, 0x40F2, 0x0014, 0x022B, 
    0x90F2, 0x004F, 0x021C, 0x20BB, 0xB0F2, 0x0040, 0x021A, 0x2C12, 
    0xB2A2, 0x0210, 0x2D00, 0xB3D2, 0x021A, 0x2CFD, 0x42D2, 0x0240, 
    0x0226, 0x12B0, 0xF888, 0xB0B2, 0x0040, 0x0210, 0x2CF4, 0xD2A2, 
    0x0210, 0x3CF1, 0xB0B2, 0x0100, 0x0210, 0x2CED, 0xB2F2, 0x021A, 
    0x2CEA, 0x42D2, 0x0240, 0x0226, 0x12B0, 0xF888, 0xB0B2, 0x0040, 
    0x0210, 0x2CE1, 0xD0B2, 0x0100, 0x0210, 0x3CDD, 0x90F2, 0x004F, 
    0x021C, 0x2002, 0x12B0, 0xFC00, 0x42D2, 0x0230, 0x020E, 0x12B0, 
    0xFC5A, 0x3CD1, 0x90F2, 0x004F, 0x021C, 0x201F, 0x92D2, 0x0207, 
    0x0233, 0x20C9, 0x92D2, 0x0208, 0x0234, 0x20C5, 0x92D2, 0x0209, 
    0x0235, 0x20C1, 0x92D2, 0x020A, 0x0236, 0x20BD, 0x407E, 0x0003, 
    0x403D, 0x0230, 0x425C, 0x0222, 0x503C, 0x0200, 0x12B0, 0xFCC2, 
    0x12B0, 0xFC00, 0x12B0, 0xFC5A, 0x3CAE, 0x425E, 0x0223, 0x403D, 
    0x0230, 0x425C, 0x0222, 0x503C, 0x0200, 0x12B0, 0xFCC2, 0x12B0, 
    0xFC5A, 0x3CA1, 0x425E, 0x0223, 0x403D, 0x0230, 0x425C, 0x0222, 
    0x503C, 0x0200, 0x12B0, 0xFCC2, 0x90F2, 0x004F, 0x021C, 0x2002, 
    0x12B0, 0xFC00, 0x12B0, 0xFC5A, 0x3C8E, 0x425E, 0x0223, 0x403D, 
    0x0230, 0x425C, 0x0222, 0x503C, 0x0200, 0x12B0, 0xFCC2, 0x90F2, 
    0x004F, 0x021C, 0x2002, 0x12B0, 0xFC00, 0x40B2, 0x00A0, 0x0218, 
    0x12B0, 0xFC5A, 0x3C78, 0x426E, 0x403D, 0x020C, 0x403C, 0x0227, 
    0x12B0, 0xFCC2, 0x90F2, 0x004F, 0x021C, 0x2021, 0xB0F2, 0x0040, 
    0x021A, 0x2C04, 0xB3D2, 0x021A, 0x2C66, 0x3C03, 0xB2F2, 0x021A, 
    0x2C62, 0x42D2, 0x0240, 0x0226, 0x12B0, 0xF888, 0x3C5C, 0x90F2, 
    0x004F, 0x021C, 0x2002, 0x12B0, 0xFC00, 0x40F2, 0x00A0, 0x0246, 
    0x12B0, 0xFCDE, 0x3C50, 0x90F2, 0x003C, 0x021C, 0x204C, 0x12B0, 
    0xFB52, 0x3C49, 0x90F2, 0x004F, 0x021C, 0x2045, 0x43C2, 0x0227, 
    0x12B0, 0xFC00, 0x3C40, 0x90F2, 0x004F, 0x021C, 0x203C, 0x12B0, 
    0xFC00, 0x40F2, 0x00A0, 0x0246, 0x93E2, 0x0230, 0x200F, 0xB0F2, 
    0x0040, 0x021A, 0x2807, 0xC0B2, 0x0200, 0x0210, 0xB0B2, 0x0020, 
    0x0210, 0x2829, 0xC0B2, 0x0020, 0x0210, 0x3C25, 0x90F2, 0x0003, 
    0x0230, 0x240B, 0x93C2, 0x0230, 0x201E, 0x90F2, 0x0064, 0x020C, 
    0x2404, 0x90F2, 0x0067, 0x020C, 0x2016, 0xB0F2, 0x0040, 0x021A, 
    0x2C08, 0xB0B2, 0x0020, 0x0210, 0x2C0C, 0xD0B2, 0x0020, 0x0210, 
    0x3C0A, 0xB0B2, 0x0200, 0x0210, 0x2C04, 0xD0B2, 0x0200, 0x0210, 
    0x3C02, 0x43C2, 0x0246, 0x43C2, 0x0221, 0x43C2, 0x0222, 0x43C2, 
    0x0223, 0xD392, 0x0162, 0x3CC6, 0x52D2, 0x0202, 0x0220, 0x42F2, 
    0x021D, 0x40B2, 0x0898, 0x0172, 0x3CBD, 0xC312, 0x1052, 0x0202, 
    0x40B2, 0x01C8, 0x0172, 0xB392, 0x0162, 0x2BFD, 0xC392, 0x0162, 
    0x92D2, 0x0202, 0x021C, 0x20AC, 0x9292, 0x0212, 0x0200, 0x20A8, 
    0x90F2, 0x0040, 0x021C, 0x2042, 0x425E, 0x0210, 0xF07E, 0x0018, 
    0x927E, 0x2017, 0x12B0, 0xF888, 0x12B0, 0xFC32, 0x930C, 0x2098, 
    0x93C2, 0x021A, 0x3803, 0xC2B2, 0x0210, 0x3C92, 0x425E, 0x0203, 
    0x535E, 0x4EC2, 0x0226, 0xC0F2, 0x0080, 0x021A, 0xD2B2, 0x0210, 
    0x3C87, 0xB3A2, 0x0210, 0x2807, 0xF0B2, 0xFEFB, 0x0210, 0x43D2, 
    0x0224, 0x12B0, 0xFC00, 0x90F2, 0x00AA, 0x0241, 0x2079, 0x90F2, 
    0x0055, 0x0242, 0x2075, 0x90F2, 0x00CC, 0x0243, 0x2071, 0x90F2, 
    0x0033, 0x0244, 0x206D, 0x12B0, 0xF98C, 0x43C2, 0x0241, 0x43C2, 
    0x0242, 0x43C2, 0x0243, 0x43C2, 0x0244, 0x3C62, 0xB3A2, 0x0210, 
    0x285F, 0x93C2, 0x021C, 0x2025, 0x40B2, 0x03F2, 0x0172, 0x12B0, 
    0xFAC4, 0xB0F2, 0x0040, 0x021A, 0x2C0B, 0xB0B2, 0x0020, 0x0210, 
    0x2818, 0xC0B2, 0x0020, 0x0210, 0x40F2, 0x00A0, 0x0246, 0x3C11, 
    0xB0B2, 0x0200, 0x0210, 0x280D, 0xC0B2, 0x0200, 0x0210, 0x40F2, 
    0x00A0, 0x0246, 0xB0B2, 0x0020, 0x0210, 0x2803, 0xC0B2, 0x0020, 
    0x0210, 0x90F2, 0x007F, 0x021C, 0x201E, 0x40B2, 0x0834, 0x0172, 
    0x12B0, 0xFAC4, 0x40F2, 0x00A0, 0x0246, 0xB0F2, 0x0040, 0x021A, 
    0x2C08, 0xB0B2, 0x0020, 0x0210, 0x2C0C, 0xD0B2, 0x0020, 0x0210, 
    0x3C0A, 0xB0B2, 0x0200, 0x0210, 0x2C04, 0xD0B2, 0x0200, 0x0210, 
    0x3C02, 0x43C2, 0x0246, 0x90F2, 0x0003, 0x021C, 0x2011, 0xB0F2, 
    0x0040, 0x021A, 0x2C04, 0xB2A2, 0x0210, 0x2C0A, 0x3C04, 0xB0B2, 
    0x0100, 0x0210, 0x2C05, 0x40B2, 0x05C8, 0x0172, 0x12B0, 0xFAC4, 
    0xD392, 0x0162, 0xC3D2, 0x0059, 0xC0B1, 0x0010, 0x0008, 0x413E, 
    0x413F, 0x413C, 0x413D, 0x1300, 0x40B2, 0x5A80, 0x0120, 0x42D2, 
    0x10FF, 0x0057, 0x42D2, 0x10FE, 0x0056, 0xD0F2, 0x0080, 0x0057, 
    0x43C2, 0x0058, 0x40F2, 0x0020, 0x0053, 0xD032, 0x0020, 0x12B0, 
    0xFC74, 0x12B0, 0xFC8C, 0x12B0, 0xFA6A, 0x12B0, 0xFB96, 0x40B2, 
    0x0224, 0x0160, 0x40B2, 0xEA60, 0x0172, 0xB392, 0x0162, 0x2BFD, 
    0xD232, 0x12B0, 0xFBCC, 0x3C17, 0x4382, 0x0216, 0x53D2, 0x0247, 
    0x5392, 0x0216, 0x90B2, 0x00A0, 0x0218, 0x240D, 0xB0B2, 0x0220, 
    0x0210, 0x2009, 0x90F2, 0x00A0, 0x0246, 0x2405, 0x40B2, 0x5A80, 
    0x0120, 0xD032, 0x0010, 0x40B2, 0x5A0D, 0x0120, 0x90B2, 0x00A0, 
    0x0218, 0x2026, 0x4382, 0x0218, 0x90F2, 0x0064, 0x020C, 0x2009, 
    0xB2E2, 0x021A, 0x2C02, 0x12B0, 0xFBCC, 0x40F2, 0x003D, 0x021A, 
    0x3C17, 0x90F2, 0x0065, 0x020C, 0x2004, 0x40F2, 0x0038, 0x021A, 
    0x3C0F, 0x90F2, 0x0067, 0x020C, 0x2009, 0xB2E2, 0x021A, 0x2C02, 
    0x12B0, 0xFBCC, 0x40F2, 0x0005, 0x021A, 0x3C02, 0x43C2, 0x021A, 
    0x90F2, 0x00A0, 0x0246, 0x2069, 0x43C2, 0x0246, 0xB0B2, 0x0020, 
    0x0210, 0x280E, 0x90F2, 0x0064, 0x020C, 0x2404, 0x90F2, 0x0065, 
    0x020C, 0x2003, 0xD3E2, 0x021B, 0x3C16, 0xD3D2, 0x021B, 0x3C13, 
    0xB3D2, 0x021B, 0x2803, 0xC3D2, 0x021B, 0x3C0D, 0xB3E2, 0x021B, 
    0x280A, 0x90F2, 0x0064, 0x020C, 0x2404, 0x90F2, 0x0065, 0x020C, 
    0x2002, 0xC3E2, 0x021B, 0xB0B2, 0x0200, 0x0210, 0x2803, 0xD3E2, 
    0x021B, 0x3C0D, 0xB3E2, 0x021B, 0x280A, 0x90F2, 0x0064, 0x020C, 
    0x2406, 0x90F2, 0x0065, 0x020C, 0x2402, 0xC3E2, 0x021B, 0x93C2, 
    0x021B, 0x241F, 0x93C2, 0x0247, 0x200E, 0x40B2, 0x0214, 0x0180, 
    0x40B2, 0x1388, 0x0192, 0xC392, 0x0182, 0x4382, 0x0216, 0xC3E2, 
    0x0029, 0x43D2, 0x0247, 0xB3E2, 0x021B, 0x40F2, 0x0028, 0x0245, 
    0x2804, 0x40B2, 0x00FA, 0x0214, 0x3C10, 0x40B2, 0x0190, 0x0214, 
    0x3C0C, 0x4382, 0x0180, 0xC392, 0x0182, 0x43C2, 0x0247, 0x4382, 
    0x0216, 0xC3E2, 0x0029, 0xC2E2, 0x0029, 0xB392, 0x0182, 0x2B52, 
    0xC392, 0x0182, 0x90F2, 0x0006, 0x0247, 0x2812, 0x425F, 0x0245, 
    0x9F82, 0x0216, 0x2C03, 0xD3E2, 0x0029, 0x3F42, 0x9292, 0x0214, 
    0x0216, 0x2C03, 0xC3E2, 0x0029, 0x3F3B, 0x4382, 0x0216, 0x3F38, 
    0x93D2, 0x0247, 0x200D, 0x9382, 0x0216, 0x2003, 0xD2E2, 0x0029, 
    0x3F2F, 0x90B2, 0x0096, 0x0216, 0x2F27, 0xC2E2, 0x0029, 0x3F28, 
    0x93E2, 0x0247, 0x200D, 0x93A2, 0x0216, 0x2C03, 0xD2E2, 0x0029, 
    0x3F1F, 0x90B2, 0x0096, 0x0216, 0x2F17, 0xC2E2, 0x0029, 0x3F18, 
    0x90F2, 0x0003, 0x0247, 0x200D, 0x93A2, 0x0216, 0x2C03, 0xD2E2, 
    0x0029, 0x3F0E, 0x90B2, 0x0096, 0x0216, 0x2F06, 0xC2E2, 0x0029, 
    0x3F07, 0x92E2, 0x0247, 0x200E, 0x90B2, 0x001E, 0x0216, 0x2C03, 
    0xD2E2, 0x0029, 0x3EFD, 0x90B2, 0x0096, 0x0216, 0x2EF5, 0xC2E2, 
    0x0029, 0x3EF6, 0x90F2, 0x0005, 0x0247, 0x22F2, 0x90B2, 0x0032, 
    0x0216, 0x2C03, 0xD2E2, 0x0029, 0x3EEB, 0x90B2, 0x0096, 0x0216, 
    0x2EE3, 0xC2E2, 0x0029, 0x3EE4, 0xC0B2, 0x0040, 0x0210, 0x425E, 
    0x0224, 0xF07E, 0x000F, 0x4EC2, 0x023E, 0x434F, 0x935E, 0x2005, 
    0x43E2, 0x023D, 0x407E, 0x00C0, 0x3C0B, 0x53D2, 0x023E, 0x42F2, 
    0x023D, 0x425E, 0x0224, 0x3C04, 0x4F5E, 0x0224, 0x42F2, 0x023D, 
    0x40B2, 0x0988, 0x0172, 0xD2A2, 0x0160, 0xC392, 0x0162, 0xC3D2, 
    0x0059, 0xB3D2, 0x0059, 0x280D, 0xD2A2, 0x0160, 0xC392, 0x0162, 
    0x934E, 0x380B, 0x40B2, 0x0028, 0x0172, 0xB392, 0x0162, 0x2C18, 
    0x3FFC, 0xB392, 0x0162, 0x2C46, 0x3FEC, 0x40B2, 0x0302, 0x0172, 
    0xB392, 0x0162, 0x2BFD, 0xC392, 0x0162, 0x40B2, 0x042E, 0x0172, 
    0x12B0, 0xFCB2, 0x93C2, 0x0206, 0x2435, 0xB392, 0x0162, 0x2BFD, 
    0xD2E2, 0x0021, 0xC392, 0x0162, 0x50B2, 0x01E0, 0x0172, 0xB392, 
    0x0162, 0x2BFD, 0xC2E2, 0x0021, 0xC392, 0x0162, 0x40B2, 0x074E, 
    0x0172, 0xB392, 0x0162, 0x2BFD, 0x5E4E, 0x53F2, 0x023D, 0x23B8, 
    0x93D2, 0x023E, 0x241A, 0x535F, 0x925F, 0x023E, 0x23AD, 0xD2A2, 
    0x0160, 0x40B2, 0x07D0, 0x0172, 0xC392, 0x0162, 0xC3D2, 0x0059, 
    0xB3D2, 0x0059, 0x2804, 0xC0B2, 0x0010, 0x0210, 0x4130, 0xB392, 
    0x0162, 0x2BF6, 0xD0B2, 0x0040, 0x0210, 0x4130, 0x403F, 0x0202, 
    0x93B2, 0x1020, 0x2403, 0x403E, 0x1052, 0x3C02, 0x403E, 0x1012, 
    0x40B2, 0x5A80, 0x0120, 0x40B2, 0xA542, 0x012A, 0x40B2, 0xA500, 
    0x012C, 0x40B2, 0xA502, 0x0128, 0x438E, 0x0000, 0x40B2, 0xA540, 
    0x0128, 0x434D, 0x3C04, 0x4FBE, 0x0000, 0x532E, 0x535D, 0x907D, 
    0x0007, 0x2BF9, 0x438E, 0x0000, 0x40B2, 0xA500, 0x0128, 0x903E, 
    0x1040, 0x2803, 0x403E, 0x1012, 0x3C02, 0x403E, 0x1052, 0x40B2, 
    0xA502, 0x0128, 0x438E, 0x0000, 0x40B2, 0xA510, 0x012C, 0x40B2, 
    0xA500, 0x012A, 0x4130, 0x434E, 0xB32C, 0x2802, 0x436E, 0x3C03, 
    0xB31C, 0x2801, 0x435E, 0xB23C, 0x2803, 0x507E, 0x0006, 0x3C04, 
    0xB22C, 0x2802, 0x507E, 0x0003, 0xB03C, 0x0020, 0x2803, 0x507E, 
    0x0012, 0x3C05, 0xB03C, 0x0010, 0x2802, 0x507E, 0x0009, 0x934C, 
    0x3403, 0x507E, 0x0036, 0x3C05, 0xB03C, 0x0040, 0x2802, 0x507E, 
    0x001B, 0x930C, 0x3403, 0x507E, 0x00A2, 0x3C05, 0xB03C, 0x4000, 
    0x2802, 0x507E, 0x0051, 0x4E4C, 0x4130, 0x93B2, 0x1020, 0x407E, 
    0x000D, 0x2007, 0x403D, 0x1053, 0x403C, 0x0203, 0x12B0, 0xFCC2, 
    0x3C06, 0x403D, 0x1013, 0x403C, 0x0203, 0x12B0, 0xFCC2, 0x90F2, 
    0x00F3, 0x0203, 0x2807, 0x43D2, 0x0203, 0x435C, 0x12B0, 0xFB0C, 
    0x4C82, 0x0204, 0x90F2, 0x0064, 0x020C, 0x240B, 0x90F2, 0x0065, 
    0x020C, 0x2407, 0x90F2, 0x0067, 0x020C, 0x2403, 0x40F2, 0x0066, 
    0x020C, 0x4130, 0xB0F2, 0x0040, 0x021A, 0x2C10, 0xB0F2, 0x0005, 
    0x021A, 0x201B, 0xD2E2, 0x0021, 0xD2A2, 0x0160, 0xC392, 0x0162, 
    0xB392, 0x0162, 0x2BFD, 0xC2E2, 0x0021, 0x4130, 0xB0F2, 0x0028, 
    0x021A, 0x200B, 0xD2E2, 0x0021, 0xD2A2, 0x0160, 0xC392, 0x0162, 
    0xB392, 0x0162, 0x2BFD, 0xC2E2, 0x0021, 0x4130, 0x434F, 0x430E, 
    0x3C05, 0xD03E, 0x0003, 0x8F5C, 0xF03C, 0x535F, 0x907F, 0x0005, 
    0x2C0C, 0x5E0E, 0x5E0E, 0x9F5C, 0xF037, 0x2BF7, 0x9F5C, 0xF03C, 
    0x2FF0, 0xD31E, 0x8F5C, 0xF037, 0x3FF0, 0x4E0C, 0xF03C, 0xFF00, 
    0x5C0C, 0x5C0C, 0x5C0C, 0x5C0C, 0x5C0C, 0x5C0C, 0xF37E, 0x5E0C, 
    0x4130, 0xB0F2, 0x0024, 0x021A, 0x2009, 0xD0F2, 0x0080, 0x021A, 
    0xD2B2, 0x0210, 0x42D2, 0x0203, 0x0226, 0x4130, 0xB2E2, 0x021A, 
    0x2C06, 0xD2B2, 0x0210, 0x42D2, 0x0203, 0x0226, 0x4130, 0xB0F2, 
    0x0020, 0x021A, 0x2C07, 0x425E, 0x0203, 0x535E, 0x4EC2, 0x0226, 
    0xD2B2, 0x0210, 0x4130, 0x43C2, 0x0241, 0x43C2, 0x0242, 0x43C2, 
    0x0243, 0x43C2, 0x0244, 0x43C2, 0x021A, 0x40B2, 0x00A0, 0x0218, 
    0x43C2, 0x021B, 0x43C2, 0x0247, 0x43C2, 0x0246, 0x4382, 0x0216, 
    0xC3E2, 0x0029, 0xC2E2, 0x0029, 0x4030, 0xFCDE, 0x40F2, 0x0039, 
    0x021A, 0x40B2, 0x02D4, 0x0180, 0x40B2, 0x88B8, 0x0192, 0x407E, 
    0x000A, 0x3C09, 0xB392, 0x0182, 0x2BFD, 0xC392, 0x0182, 0x40B2, 
    0x5A0D, 0x0120, 0x537E, 0x934E, 0x23F5, 0x4382, 0x0180, 0x4130, 
    0xB0F2, 0x0040, 0x021A, 0x2C09, 0xB0F2, 0x0005, 0x021A, 0x2010, 
    0x42D2, 0x0203, 0x0226, 0x4030, 0xF888, 0xB0F2, 0x0028, 0x021A, 
    0x2007, 0x425E, 0x0203, 0x535E, 0x4EC2, 0x0226, 0x12B0, 0xF888, 
    0x4130, 0xB0B2, 0x0040, 0x0210, 0x2C06, 0xC2B2, 0x0210, 0x43C2, 
    0x023F, 0x430C, 0x4130, 0x53D2, 0x023F, 0x93F2, 0x023F, 0x2003, 
    0xD0B2, 0x0010, 0x0210, 0x431C, 0x4130, 0x40F2, 0x00AA, 0x0241, 
    0x40F2, 0x0055, 0x0242, 0x40F2, 0x00CC, 0x0243, 0x40F2, 0x0033, 
    0x0244, 0x4130, 0x40F2, 0x00FC, 0x0022, 0x43C2, 0x0021, 0x43C2, 
    0x002E, 0x43F2, 0x002A, 0x43C2, 0x0029, 0x4130, 0x40F2, 0x000E, 
    0x005A, 0x40F2, 0x0003, 0x005B, 0x40F2, 0x000A, 0x0059, 0x4130, 
    0x4C0F, 0x5D0F, 0x3C03, 0x43CC, 0x0000, 0x531C, 0x9F0C, 0x23FB, 
    0x4130, 0x43C2, 0x0206, 0x12B0, 0xFCD2, 0x12B0, 0xFCD2, 0x4030, 
    0xFCD2, 0x3C04, 0x4DFC, 0x0000, 0x531C, 0x537E, 0x934E, 0x23FA, 
    0x4130, 0xB3D2, 0x005A, 0x2802, 0x53D2, 0x0206, 0x4130, 0x4382, 
    0x0210, 0x4130, 0x4030, 0xFCE8, 0x4030, 0xFCEC, 0x3FFF, 0xFFFF, ]

mnemonic = {
   0x1000 : { "nm" : "rrc",   "op" : "single"},
   0x1040 : { "nm" : "rrc.b", "op" : "single"},
   0x1080 : { "nm" : "swpb",  "op" : "single"},
   0x1100 : { "nm" : "rra",   "op" : "single"},
   0x1140 : { "nm" : "rra.b", "op" : "single"},
   0x1180 : { "nm" : "sxt",   "op" : "single"},
   0x1200 : { "nm" : "push",  "op" : "single"},
   0x1240 : { "nm" : "push.b","op" : "single"},
   0x1280 : { "nm" : "call",  "op" : "single"},
   0x1300 : { "nm" : "reti",  "op" : "single"},
   0x2000 : { "nm" : "jne",   "op" : "jump"  },
   0x2400 : { "nm" : "jeq",   "op" : "jump"  },
   0x2800 : { "nm" : "jnc",   "op" : "jump"  },
   0x2C00 : { "nm" : "jc",    "op" : "jump"  },
   0x3000 : { "nm" : "jn",    "op" : "jump"  },
   0x3400 : { "nm" : "jge",   "op" : "jump"  },
   0x3800 : { "nm" : "jl",    "op" : "jump"  },
   0x3C00 : { "nm" : "jmp",   "op" : "jump"  },
   0x4000 : { "nm" : "mov",   "op" : "double"},
   0x5000 : { "nm" : "add",   "op" : "double"},
   0x6000 : { "nm" :"addc",   "op" : "double"},
   0x7000 : { "nm" :"subc",   "op" : "double"},
   0x8000 : { "nm" :"sub",    "op" : "double"},
   0x9000 : { "nm" :"cmp",    "op" : "double"},
   0xA000 : { "nm" :"dadd",   "op" : "double"},
   0xB000 : { "nm" :"bit",    "op" : "double"},
   0xC000 : { "nm" :"bic",    "op" : "double"},
   0xD000 : { "nm" :"bis",    "op" : "double"},
   0xE000 : { "nm" :"xor",    "op" : "double"},
   0xF000 : { "nm" :"and",    "op" : "double"},
}

OPCODE_RETI = 0x1300

offset = 0xf000	
reset = 0xf042
com_a0 = 0xf05A

NOP_CONST = 0x4303
RET_CONST = 0x4130

CLRN_CONST = 0xC222
CLRC_CONST = 0xC312
CLRZ_CONST = 0xC322

DINT_CONST = 0xC232
EINT_CONST = 0xD232

SETN_CONST = 0xD222
SETC_CONST = 0xD312
SETZ_CONST = 0xD322

BW_STR = ['W', 'B']

word_len = len(code_f000)
#print(word_len)

reset_idx = (reset-offset)//2

#for i in range(reset_idx, reset_idx+10):
#	print('%04X' % code_f000[i])
	
com_a0_idx = (com_a0-offset)//2

def single_get_len(D_Ad):
	if(0==D_Ad):
	#Rn
		return 1
	elif(1==D_Ad):
	#
		return 2
	elif(2==D_Ad):
	#
		return 1
	elif(3==D_Ad):
	#
		return 2
		
def double_get_len(D_As, D_Ad):
	if(0==D_Ad):
		if(0==D_As):
		#
			return 1
		elif(1==D_As):
		#
			return 1
		elif(2==D_As):
		#
			return 1
		elif(3==D_As):
		#
			return 2
	elif(1==D_Ad):
		if(0==D_As):
		#Sure
			return 2
		elif(1==D_As):
		#Sure
			return 2
		elif(2==D_As):
		#Sure
			return 2
		elif(3==D_As):
		#Sure
			return 3
		
def dis(addr, code):
	ret = [1, "unknown %04x->%04x" % (offset+addr*2, code[0])]
	
	#emulated instruction for NOP
	if(NOP_CONST == code[0]):
		ret[1] = "NOP"
		return ret
		
	#emulated instruction for RET
	if(RET_CONST == code[0]):
		ret[1] = "RET\n"
		return ret	
		
	#emulated instruction for CLRN
	if(CLRN_CONST == code[0]):
		ret[1] = "CLRN"
		return ret
		
	#emulated instruction for CLRC
	if(CLRC_CONST == code[0]):
		ret[1] = "CLRC"
		return ret	
		
	#emulated instruction for CLRZ
	if(CLRZ_CONST == code[0]):
		ret[1] = "CLRZ"
		return ret			

	#emulated instruction for SETN
	if(SETN_CONST == code[0]):
		ret[1] = "SETN"
		return ret
		
	#emulated instruction for SETC
	if(SETC_CONST == code[0]):
		ret[1] = "SETC"
		return ret	
		
	#emulated instruction for SETZ
	if(SETZ_CONST == code[0]):
		ret[1] = "SETZ"
		return ret	

	#emulated instruction for DINT
	if(DINT_CONST == code[0]):
		ret[1] = "DINT"
		return ret	
		
	#emulated instruction for EINT
	if(EINT_CONST == code[0]):
		ret[1] = "EINT"
		return ret			

	#single Opcode
	b15_7 = (code[0]>>7)
	bw = (code[0]&0x0040)>>6
	S_Ad = (code[0]&0x0030)>>4
	S_DSReg = (code[0]&0x000F)
	
	#double Opcode
	b15_12 = (code[0]>>12)
	D_SReg = (code[0]&0x0F00)>>8
	D_Ad = (code[0]&0x0080)>>7
	#bw = (code[0]&0x0040)>>6
	D_As = (code[0]&0x0030)>>4
	D_DReg = (code[0]&0x000F)
	
	#Jump Opcode
	b15_13 = (code[0]>>13)
	Jmp_C = (code[0]&0x1C00)>>10
	Jmp_Off = (code[0]&0x003F)
	
#TODO: Should condisder the addressing mode to decide the length of the instruct(Format I)	
	#Single
	if(b15_7== 0x20):
		ret[0] = single_get_len(S_Ad)
		ret[1] = "RRC"

	elif(b15_7== 0x21):
		ret[0] = single_get_len(S_Ad)
		ret[1] = "SWPB"		
		
	elif(b15_7== 0x22):
		ret[0] = single_get_len(S_Ad)
		ret[1] = "RRA"

	elif(b15_7== 0x23):
		ret[0] = single_get_len(S_Ad)
		ret[1] = "SXT"	
		
	elif(b15_7== 0x24):
		ret[0] = single_get_len(S_Ad)
		ret[1] = "PUSH"		
		
	elif(b15_7== 0x25):
#All addressing modes are possible for the CALL instruction. If the symbolic mode (ADDRESS), the
#immediate mode (#N), the absolute mode (&EDE) or the indexed mode x(RN) is used, the word that
#follows contains the address information.	
		ret[0] = 2
		ret[1] = ("CALL #0x%04X" % code[1])	
		
	elif(b15_7== 0x26):
		ret[0] = 1
		ret[1] = "RETI\n"	
		
#TODO: Should condisder the addressing mode to decide the length of the instruct(Format II)		
#Double				
	elif(b15_12== 4):
		#ret[0] = double_get_len(D_As, D_Ad)
		ret[1] = "MOV"
		if(0==D_Ad):
			if(0==D_As):
			#
				ret[0] = 1
			elif(1==D_As):
			#
				ret[0] = 1
			elif(2==D_As):
			#
				ret[0] = 1
			elif(3==D_As):
			#
				ret[0] = 2
		elif(1==D_Ad):
			if(0==D_As):
			#Sure
				ret[0] = 2
			elif(1==D_As):
			#Sure
				ret[0] = 3
			elif(2==D_As):
			#Sure
				ret[0] = 2
			elif(3==D_As):
				if(0==D_SReg):
					ret[0] = 3
				else:
					ret[0] = 2
		
	elif(b15_12== 5):
		#ret[0] = double_get_len(D_As, D_Ad)
		ret[1] = "ADD"
		if(0==D_Ad):
			if(0==D_As):
			#
				ret[0] = 1
			elif(1==D_As):
			#
				ret[0] = 1
			elif(2==D_As):
			#
				ret[0] = 1
			elif(3==D_As):
			#
				ret[0] = 2
		elif(1==D_Ad):
			if(0==D_As):
			#Sure
				ret[0] = 2
			elif(1==D_As):
			#Sure
				ret[0] = 2
			elif(2==D_As):
			#Sure
				ret[0] = 2
			elif(3==D_As):
			#Sure
				ret[0] = 3

				
	elif(b15_12== 6):
		#ret[0] = double_get_len(D_As, D_Ad)			
		ret[1] = "ADDC"
		if(0==D_Ad):
			if(0==D_As):
			#
				ret[0] = 1
			elif(1==D_As):
			#
				ret[0] = 1
			elif(2==D_As):
			#
				ret[0] = 1
			elif(3==D_As):
			#
				ret[0] = 2
		elif(1==D_Ad):
			if(0==D_As):
			#Sure
				ret[0] = 2
			elif(1==D_As):
			#Sure
				ret[0] = 2
			elif(2==D_As):
			#Sure
				ret[0] = 2
			elif(3==D_As):
			#Sure
				ret[0] = 3

				
	elif(b15_12== 7):
		#ret[0] = double_get_len(D_As, D_Ad)
		ret[1] = "SUBC"
		if(0==D_Ad):
			if(0==D_As):
			#
				ret[0] = 1
			elif(1==D_As):
			#
				ret[0] = 1
			elif(2==D_As):
			#
				ret[0] = 1
			elif(3==D_As):
			#
				ret[0] = 2
		elif(1==D_Ad):
			if(0==D_As):
			#Sure
				ret[0] = 2
			elif(1==D_As):
			#Sure
				ret[0] = 2
			elif(2==D_As):
			#Sure
				ret[0] = 2
			elif(3==D_As):
			#Sure
				ret[0] = 3
					
	elif(b15_12== 8):
		#ret[0] = double_get_len(D_As, D_Ad)
		ret[1] = "SUB"
		if(0==D_Ad):
			if(0==D_As):
			#
				ret[0] = 1
			elif(1==D_As):
			#
				ret[0] = 1
			elif(2==D_As):
			#
				ret[0] = 1
			elif(3==D_As):
			#
				ret[0] = 2
		elif(1==D_Ad):
			if(0==D_As):
			#Sure
				ret[0] = 2
			elif(1==D_As):
			#Sure
				ret[0] = 2
			elif(2==D_As):
			#Sure
				ret[0] = 2
			elif(3==D_As):
			#Sure
				ret[0] = 3

				
	elif(b15_12== 9):
		#ret[0] = double_get_len(D_As, D_Ad)
		ret[1] = "CMP"
		if(0==D_Ad):
			if(0==D_As):
			#
				ret[0] = 1
			elif(1==D_As):
			#
				ret[0] = 1
			elif(2==D_As):
			#
				ret[0] = 1
			elif(3==D_As):
			#
				ret[0] = 2
		elif(1==D_Ad):
			if(0==D_As):
			#Sure
				ret[0] = 2
			elif(1==D_As):
			#Sure
				ret[0] = 2
			elif(2==D_As):
			#Sure
				ret[0] = 2
			elif(3==D_As):
			#Sure
				ret[0] = 3

			
	elif(b15_12== 0x0A):
		#ret[0] = double_get_len(D_As, D_Ad)
		ret[1] = "DADD"
		if(0==D_Ad):
			if(0==D_As):
			#
				ret[0] = 1
			elif(1==D_As):
			#
				ret[0] = 1
			elif(2==D_As):
			#
				ret[0] = 1
			elif(3==D_As):
			#
				ret[0] = 2
		elif(1==D_Ad):
			if(0==D_As):
			#Sure
				ret[0] = 2
			elif(1==D_As):
			#Sure
				ret[0] = 2
			elif(2==D_As):
			#Sure
				ret[0] = 2
			elif(3==D_As):
			#Sure
				ret[0] = 3
	
				
	elif(b15_12== 0x0B):
		#ret[0] = double_get_len(D_As, D_Ad)
		ret[1] = "BIT"
		if(0==D_Ad):
			if(0==D_As):
			#
				ret[0] = 1
			elif(1==D_As):
			#
				ret[0] = 1
			elif(2==D_As):
			#
				ret[0] = 1
			elif(3==D_As):
			#
				ret[0] = 2
		elif(1==D_Ad):
			if(0==D_As):
			#Sure
				ret[0] = 2
			elif(1==D_As):
			#Sure
				ret[0] = 2
			elif(2==D_As):
			#Sure
				ret[0] = 2
			elif(3==D_As):
			#Sure
				ret[0] = 3

					
	elif(b15_12== 0x0C):
		#ret[0] = double_get_len(D_As, D_Ad)
		ret[1] = "BIC"
		if(0==D_Ad):
			if(0==D_As):
			#
				ret[0] = 1
			elif(1==D_As):
			#
				ret[0] = 1
			elif(2==D_As):
			#
				ret[0] = 1
			elif(3==D_As):
			#
				ret[0] = 2
		elif(1==D_Ad):
			if(0==D_As):
			#Sure
				ret[0] = 2
			elif(1==D_As):
			#Sure
				ret[0] = 2
			elif(2==D_As):
			#Sure
				ret[0] = 2
			elif(3==D_As):
			#Sure
				ret[0] = 3
						
	elif(b15_12== 0x0D):
		#ret[0] = double_get_len(D_As, D_Ad)
		ret[1] = "BIS"
		if(0==D_Ad):
			if(0==D_As):
			#
				ret[0] = 1
			elif(1==D_As):
			#
				ret[0] = 1
			elif(2==D_As):
			#
				ret[0] = 1
			elif(3==D_As):
			#
				ret[0] = 2
		elif(1==D_Ad):
			if(0==D_As):
			#Sure
				ret[0] = 2
			elif(1==D_As):
			#Sure
				ret[0] = 2
			elif(2==D_As):
			#Sure
				ret[0] = 2
			elif(3==D_As):
			#Sure
				ret[0] = 3			 
			
	elif(b15_12== 0x0E):
		#ret[0] = double_get_len(D_As, D_Ad)
		ret[1] = "XOR"
		if(0==D_Ad):
			if(0==D_As):
			#
				ret[0] = 1
			elif(1==D_As):
			#
				ret[0] = 1
			elif(2==D_As):
			#
				ret[0] = 1
			elif(3==D_As):
			#
				ret[0] = 2
		elif(1==D_Ad):
			if(0==D_As):
			#Sure
				ret[0] = 2
			elif(1==D_As):
			#Sure
				ret[0] = 2
			elif(2==D_As):
			#Sure
				ret[0] = 2
			elif(3==D_As):
			#Sure
				ret[0] = 3

				
	elif(b15_12== 0x0F):
		#ret[0] = double_get_len(D_As, D_Ad)
		ret[1] = "AND"
		if(0==D_Ad):
			if(0==D_As):
			#
				ret[0] = 1
			elif(1==D_As):
			#
				ret[0] = 1
			elif(2==D_As):
			#
				ret[0] = 1
			elif(3==D_As):
			#
				ret[0] = 2
		elif(1==D_Ad):
			if(0==D_As):
			#Sure
				ret[0] = 2
			elif(1==D_As):
			#Sure
				ret[0] = 2
			elif(2==D_As):
			#Sure
				ret[0] = 2
			elif(3==D_As):
			#Sure
				ret[0] = 3

			
#All jump instructions require one code word, and take two CPU cycles to execute, regardless of whether
#the jump is taken or not.	
		#Jump
	elif(b15_13== 1):
		if(0==Jmp_C):
		#JNE/JNZ	Jump if not equal/zero
			ret[1] = "JNE 0x%03X" % (Jmp_Off*2)
		elif(1==Jmp_C):
		#JEQ/JZ Jump if equal/zero
			ret[1] = "JEQ 0x%03X" % (Jmp_Off*2)
		elif(2==Jmp_C):
		#JNC/JLO	Jump if no carry/lower
			ret[1] = "JNC 0x%03X" % (Jmp_Off*2)
		elif(3==Jmp_C):
		#JC/JHS	Jump if carry/higher or same
			ret[1] = "JC 0x%03X" % (Jmp_Off*2)
		elif(4==Jmp_C):
		#JN	Jump if negative
			ret[1] = "JN 0x%03X" % (Jmp_Off*2)
		elif(5==Jmp_C):
		#JGE	Jump if greater or equal (N == V)
			ret[1] = "JGE 0x%03X" % (Jmp_Off*2)
		elif(6==Jmp_C):
		#JL	Jump if less (N!= V)
			ret[1] = "JL 0x%03X" % (Jmp_Off*2)
		elif(7==Jmp_C):
		#JMP	Jump (unconditionally
			ret[1] = "JMP 0x%03X" % (Jmp_Off*2)		

	#Single Process except RETI and CALL
	if(b15_7 in range(0x20, 0x25)):
		ret[1] +=".%s " % BW_STR[bw]
		if(0==S_Ad):
			ret[1] +="R%02d" % S_DSReg
		elif(1==S_Ad):
			if(ret[0]==1):
				ret[1] +="%02d" % S_DSReg
			else:
				ret[1] +="%02d, %04X" % (S_DSReg, code[1])
		elif(2==S_Ad):
			ret[1] +="2 %02d" % S_DSReg
		elif(3==S_Ad):
			ret[1] +="3 %02d" % S_DSReg	
			
	#Double Process
	if(b15_12 in range(4,16)):
		ret[1] += ".%s " % BW_STR[bw]
		para_str=''
		if(ret[0]==1):
			pass
		elif(ret[0]==2):
			para_str = '#%04X, ' % code[1]
		elif(ret[0]==3):
			para_str = '#%04X, #%04X, ' % (code[1], code[2])
		ret[1] += para_str
		ret[1] += "SReg:%x, D_Ad:%x, D_As:%x, DReg:%x" % (D_SReg, D_Ad, D_As, D_DReg)	
			
	return ret

#dis_addr = com_a0_idx
dis_addr = 0
for i in range(com_a0_idx, word_len-com_a0_idx):	

	ret = dis(dis_addr, code_f000[dis_addr:dis_addr+3])
	print('\t%s\t//;[%04X]\t' % (ret[1], offset+dis_addr*2), end='')
	
	for j in range(ret[0]):
		print('%04X' % code_f000[dis_addr+j], end=' ')
	print()
	
	#Only Decode ISR for test
	#if(ret[1] == "RETI"):
	#	print()
	#	break;
		
	dis_addr += ret[0]
	if(dis_addr>=word_len):
		break
		